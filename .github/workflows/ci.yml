name: DevSecOps for React + Supabase (Docker)

on:
  push:
    branches: [main, BigBang, test/devsecops]
  pull_request:
    branches: [main, BigBang, test/devsecops]

env:
  REACT_APP_SUPABASE_URL: ${{ secrets.REACT_APP_SUPABASE_URL }}
  REACT_APP_SUPABASE_ANON_KEY: ${{ secrets.REACT_APP_SUPABASE_ANON_KEY }}

  LOGFLARE_LOGGER_BACKEND_API_KEY: ${{ secrets.LOGFLARE_LOGGER_BACKEND_API_KEY }}
  LOGFLARE_API_KEY: ${{ secrets.LOGFLARE_API_KEY }}

  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
  POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}

  DASHBOARD_USERNAME: ${{ secrets.DASHBOARD_USERNAME }}
  DASHBOARD_PASSWORD: ${{ secrets.DASHBOARD_PASSWORD }}

  JWT_SECRET: ${{ secrets.JWT_SECRET }}
  ANON_KEY: ${{ secrets.ANON_KEY }}
  SERVICE_ROLE_KEY: ${{ secrets.SERVICE_ROLE_KEY }}

  DOCKER_SOCKET_LOCATION: ${{secrets.DOCKER_SOCKET_LOCATION}}

jobs:
  devsecops:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: List project files
        run: ls -R

      - name: Start PostgreSQL manually
        run: |
          docker run -d \
            -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            -e POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
            -p 5432:5432 \
            --name pgci postgres:15

      - name: Install React dependencies
        run: npm install
        working-directory: ./writeup

      - name: Run React build
        run: npm run build
        working-directory: ./writeup
        env:
            CI: false

      - name: Set up Python (for sqlfluff)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install sqlfluff
        run: pip install sqlfluff

      - name: Lint data.sql with sqlfluff (non-blocking) dev version
        run: sqlfluff lint dev/data.sql --dialect postgres || true

      - name: Scan for secrets with Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: --verbose --redact

      - name: Build and start Docker environment
        run: |
          docker compose -f docker-compose.yml -f ./dev/docker-compose.dev.yml up
        env:
            LOGFLARE_LOGGER_BACKEND_API_KEY: ${{ secrets.LOGFLARE_LOGGER_BACKEND_API_KEY }}
            LOGFLARE_API_KEY: ${{ secrets.LOGFLARE_API_KEY }}

            DASHBOARD_USERNAME: ${{ secrets.DASHBOARD_USERNAME }}
            DASHBOARD_PASSWORD: ${{ secrets.DASHBOARD_PASSWORD }}

            JWT_SECRET: ${{ secrets.JWT_SECRET }}
            ANON_KEY: ${{ secrets.ANON_KEY }}
            SERVICE_ROLE_KEY: ${{ secrets.SERVICE_ROLE_KEY }}

            DOCKER_SOCKET_LOCATION: /var/run/docker.sock
            POOLER_PROXY_PORT_TRANSACTION: ${{ secrets.POOLER_PROXY_PORT_TRANSACTION }}
            POOLER_DEFAULT_POOL_SIZE: ${{ secrets.POOLER_DEFAULT_POOL_SIZE }}
            POOLER_MAX_CLIENT_CONN: ${{ secrets.POOLER_MAX_CLIENT_CONN }}
            POOLER_TENANT_ID: ${{ secrets.POOLER_TENANT_ID }}
            KONG_HTTP_PORT: ${{ secrets.KONG_HTTP_PORT }}
            KONG_HTTPS_PORT: ${{ secrets.KONG_HTTPS_PORT }}
            SITE_URL: ${{ secrets.SITE_URL }}
            JWT_EXPIRY: ${{ secrets.JWT_EXPIRY }}
            DISABLE_SIGNUP: ${{ secrets.DISABLE_SIGNUP }}
            API_EXTERNAL_URL: ${{ secrets.API_EXTERNAL_URL }}
            MAILER_URLPATHS_CONFIRMATION: ${{ secrets.MAILER_URLPATHS_CONFIRMATION }}
            MAILER_URLPATHS_INVITE: ${{ secrets.MAILER_URLPATHS_INVITE }}
            MAILER_URLPATHS_RECOVERY: ${{ secrets.MAILER_URLPATHS_RECOVERY }}
            MAILER_URLPATHS_EMAIL_CHANGE: ${{ secrets.MAILER_URLPATHS_EMAIL_CHANGE }}
            ENABLE_EMAIL_SIGNUP: ${{ secrets.ENABLE_EMAIL_SIGNUP }}
            ENABLE_EMAIL_AUTOCONFIRM: ${{ secrets.ENABLE_EMAIL_AUTOCONFIRM }}
            SMTP_ADMIN_EMAIL: ${{ secrets.SMTP_ADMIN_EMAIL }}
            SMTP_HOST: ${{ secrets.SMTP_HOST }}
            SMTP_PORT: ${{ secrets.SMTP_PORT }}
            SMTP_USER: ${{ secrets.SMTP_USER }}
            SMTP_PASS: ${{ secrets.SMTP_PASS }}
            SMTP_SENDER_NAME: ${{ secrets.SMTP_SENDER_NAME }}
            ENABLE_ANONYMOUS_USERS: ${{ secrets.ENABLE_ANONYMOUS_USERS }}
            ENABLE_PHONE_SIGNUP: ${{ secrets.ENABLE_PHONE_SIGNUP }}
            ENABLE_PHONE_AUTOCONFIRM: ${{ secrets.ENABLE_PHONE_AUTOCONFIRM }}
            FUNCTIONS_VERIFY_JWT: ${{ secrets.FUNCTIONS_VERIFY_JWT }}
            


      - name: Scan all Compose files with Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          quiet: true

      - name: Cleanup Postgres container
        if: always()
        run: docker rm -f pgci || true
